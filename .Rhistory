system(paste("ldd", dir(system.file("libs", package = "RCurl"), full=TRUE)))
require(slidify)
metadata <- eml_read("http://befdata/datasets/334.eml")
require("EML")
metadata <- eml_read("http://befdata/datasets/334.eml")
eml_get(metadata, "coverage")
eml_get(metadata, "contact")
eml_get
eml_get(metadata, "coverage").as_eml
eml_get(metadata, "coverage").as_xml
eml_get(metadata, "coverage").to_xml
eml_get(metadata, "col.defs")[1]
eml_get(metadata, "unit.defs")[1]
eml_get(metadata, "unit.defs")[1]
metadata
the_csv_for_eml = read.csv("http://befdata/datasets/334/download.csv?separate_category_columns=true")
the_csv_for_eml
the_dataset = read.csv("http://befdata/datasets/334/download.csv?separate_category_columns=true")
the_dataset = eml_get(metadata, "data.set")
the_csv_for_eml[1:3, 1:5]
the_csv_for_eml[1:4, 1:3]
the_dataset = eml_get(metadata, "creator")
the_dataset[1:4, 1:3]
metadata <- eml_read("http://china.befdata.biow.uni-leipzig.de/datasets/334.eml")
eml_get(metadata, "col.defs")[1]
HF_address <- new("address",
deliveryPoint = "324 North Main Street",
city = "Petersham",
administrativeArea = "MA",
postalCode = "01366",
country = "USA")
addy <- new("address",
deliveryPoint = "324 North Main Street",
city = "Petersham",
administrativeArea = "MA",
postalCode = "01366",
country = "USA")
addy
addy.to_eml
addy.as_eml
addy.as_XML
addy.as_xml
addy.to_xml
require(slidify)
library(slidifyx)
library(slidify)
eml_config
library(EML)
eml_config
data.set
new("address")
new("creator")
new("creator")
slots(new("creator"))
slot(new("creator"))
my_institute_address <- new("address",
organizationName = "Universität Leipzig",
deliveryPoint = "Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
new("address")
aaron <- as.person("Aaron Ellison <fakeaddress@email.com>")
me <- as.person("Claas-Thido Pfaff <fakeaddress@email.com>")
me
as(me, "contact")
creator <- c(as("Aaron Ellison", "creator"), as("Nicholas Gotelli", "creator"))
creator
creator <- c(as("Aaron Ellison", "creator", "myfakeemail@test.com"), as("Nicholas Gotelli", "creator"))
creator <- c(as("Aaron Ellison", "creator", email = "myfakeemail@test.com"), as("Nicholas Gotelli", "creator"))
creator <- c(as("Aaron Ellison", "creator"), as("Nicholas Gotelli", "creator"))
creator <- c(as("Claas-Thido Pfaff", "creator"), as("Anne Lang", "creator"))
creator[1]
creator[2]
creator[1]@address
my_institute_address <- new("address",
deliveryPoint = "Universität Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
creator[1]@address = my_institute_address
eml_person("Benjamin Baiser <fake@test.com> [ctb]")
eml_person("Benjamin Baiser <fake@test.com> [cre]")
eml_person("Claas-Thido Pfaff <fake@test.com> [ctp]")
eml_person("Claas-Thido Pfaff <fake@test.com> [ctb]")
eml_person("Claas-Thido Pfaff <fake@test.com>")
slotNames(new("dataset"))
slotNames(new("eml"))
unit.defs = unit_defs)
as(class, "creator")
as(claas, "creator")
claas = eml_person("Claas-Thido Pfaff <fake@test.com>")
as(claas, "creator")
claas_creator = as(claas, "creator")[1:3]
claas_creator@givenName
claas_creator = as(claas, "creator")
claas_creator@givenName
claas_creator@individualName@givenName
claas_creator@individualName
claas_creator@individualName[1]
claas_creator@individualName@givenName
claas_creator@address
claas_creator@phone
claas_creator@address
claas_creator@address = address
address <- new("address",
deliveryPoint = "Universität Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
claas_creator@address = address
claas@personName
claas_creator@individualName
claas_creator@individualName@givenName
claas = as(eml_person("Claas-Thido Pfaff <fake@test.com>") "creator")
claas = as(eml_person("Claas-Thido Pfaff <fake@test.com>"), "creator")
creator_claas = as(claas, "creator")
creator@individualName
claas = eml_person("Claas-Thido Pfaff <fake@test.com>")
creator_claas = as(claas, "creator")
creator@individualName
creator_claas@individualName
creator_claas@address
example_dataset
example_dataset = read.csv("http://befdata/datasets/334/download.csv?separate_category_columns=true")
example_dataset = eml_get(metadata, "data.set")
example_dataset = read.csv("http://befdata/datasets/334/download.csv?separate_category_columns=true")
example_dataset[1:4, 1:3]
metadata
metadata <- eml_read("http://china.befdata.biow.uni-leipzig.de/datasets/334.eml")
metadata
metadata@intellectualRights
metadata@dataset
metadata@dataset@intellectualRights
```
strsplit(metadata@dataset@intellectualRights,split="\\.")[1]
mysplit = strsplit(metadata@dataset@intellectualRights,split="\\.")
mysplit[1]
mysplit[1][1]
mysplit[[1]]
mysplit = unlist(strsplit(metadata@dataset@intellectualRights,split="\\."))
mysplit[1]
described_dataset
source('~/.active-rstudio-document', echo=TRUE)
described_dataset
source('~/.active-rstudio-document', echo=TRUE)
```{r set_unit_defs}
source('~/.active-rstudio-document', echo=TRUE)
described_dataset
slot(names("eml"))
slots(names("eml"))
slot(names("eml"))"a"
fsd
slots("eml")
slot("eml")
slotNames(new("eml"))
slotNames(new("dataset"))
title
creator
license
eml <- eml( dataset = described_dataset,
title = title,
creator = creator,
intellectualRights = license
)
eml
eml_write(eml, file="mymetadata.xml")
eml_validate("mymetadata.xml")
install.packages("RHTMLForms")
setRepositories()
install.packages("RHTMLForms")
setRepositories()
setRepositories()
setRepositories()
eml_validate("mymetadata.xml")
as(eml, "XML")
as(eml, "xml")
eml
new("eml")
dat = data.set(river = c("SAC",  "SAC",   "AM"),
spp   = c("king",  "king", "ccho"),
stg   = c("smolt", "parr", "smolt"),
ct    = c(293L,    410L,    210L),
col.defs = c("River site used for collection",
"Species common name",
"Life Stage",
"count of live fish in traps"),
unit.defs = list(c(SAC = "The Sacramento River",
AM = "The American River"),
c(king = "King Salmon",
ccho = "Coho Salmon"),
c(parr = "third life stage",
smolt = "fourth life stage"),
"number"))
eml_write(dat, file="testdat.xml")
eml_validate("testdat.xml")
eml <- eml( dataset = described_dataset,
title = title,
creator = creator,
intellectualRights = license
)
eml_write(eml, file="testdat.xml")
eml_validate("testdat.xml")
eml <- eml( dataset = described_dataset,
title = title,
creator = creator,
intellectualRights = license
)
contact_claas = as(claas, "contact")
contact_claas
eml <- eml( dataset = described_dataset,
title = title,
creator = claas_creator,
contact = claas_contact
intellectualRights = license
eml <- eml( dataset = described_dataset,
title = title,
creator = claas_creator,
contact = claas_contact,
intellectualRights = license
)
contact_claas = as(claas, "contact")
dataset_described
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
eml
described_dataset
title
creator_claas
contact_claas
license
license = unlist(strsplit(metadata@dataset@intellectualRights, split="\\."))[1]
license
eml <- eml( dataset = described_dataset,
title = title,
creator = creator_claas,
contact = contact_claas,
intellectualRights = license
)
eml
eml <- eml( dataset = described_dataset,
title = title,
creator = creator_claas,
contact = contact_claas,
intellectualRights = license
)
eml <- eml( dataset = described_dataset,
title = title,
creator = creator_claas,
contact = contact_claas,
intellectualRights = license,
dataTable = described_dataset
)
eml
as(eml, "xml")
as(eml, "xml")
as(eml, "eml")
require(XML)
library("devtools")
install_github("RWordXML", "duncantl")
install.packages("XML")
install.packages("XML")
require("XML")
eml <- eml( dataset = described_dataset,
title = title,
creator = creator_claas,
contact = contact_claas,
intellectualRights = license,
dataTable = described_dataset
)
eml
as(eml, "xml")
class(eml)
as(eml, "eml")
as(eml, "s4")
eml <- new("eml",
packageId = uuid::UUIDgenerate(),
system = "uuid", # type of identifier
dataset = dataset,
additionalMetadata = additionalMetadata)
eml <- new("eml",
packageId = uuid::UUIDgenerate(),
system = "uuid", # type of identifier
dataset = described_dataset)
described_dataset
class(described_dataset)
described_dataset = data.set(river = c("SAC",  "SAC",   "AM"),
spp   = c("king",  "king", "ccho"),
stg   = c("smolt", "parr", "smolt"),
ct    = c(293,    410,    210),
col.defs = col_defs,
unit.defs = unit_defs)
class("describe_dataset")
class(described_dataset)
eml <- eml( dataset = described_dataset
)
eml
eml@dataset
as(eml@dataset, "XML")
as(eml@dataset, "xml")
as(eml@dataset, "eml")
as(eml@dataset, "EML")
as(eml@dataset, eml)
eml_write(eml, file="mymetadata.xml")
eml_validate("mymetadata.xml")
eml
eml
source('~/.active-rstudio-document', echo=TRUE)
eml_write(eml, file="mymetadata.xml")
eml_validate("mymetadata.xml")
slotNames(new("dataset"))
slotNames(new("eml"))
eml
data <- eml(dat = described_dataset,
title = title,
creator = creator_claas,
intellectualRights = license,
)
data
eml_write(eml, file="mymetadata.xml")
eml_write(data, file="mymetadata.xml")
eml
